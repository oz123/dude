# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
if [ -x /usr/bin/lesspipe ] ; then
    LESSOPEN="|lesspipe.sh %s"; export LESSOPEN
    LESSCLOSE="/usr/bin/lesspipe %s %s"; export LESSCLOSE
fi


# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    #alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
fi

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

alias gittree='git log --color --graph --decorate --pretty=oneline --abbrev-commit'
##-ANSI-COLOR-CODES-##
Color_Off="\[\033[0m\]"
NO_COLOUR="\[\033[0m\]"
###-Regular-###
Red="\[\033[0;31m\]"
Green="\[\033[0;32m\]"
Purple="\[\033[0;35m\]"
####-Bold-####
BRed="\[\033[1;31m\]"
BPurple="\[\033[1;35m\]"
Cyan="\[\033[1;36m\]"
Blue="\[\033[1;34m\]"
Yellow="\[\033[0;33m\]"

PS1=""

PS1+="$Blue\u$Color_Off@$Blue\h$Color_Off:$BPurple\w$Color_Off"

# set up command prompt
function __prompt_command()
{   
    # capture the exit status of the last command
    EXIT=$__bp_last_ret_value
    PS1=""
    #if [ $EXIT -eq 0 ]; then PS1+="$Green[\!]$Color_Off "; else PS1+="$Red[\!]$Color_Off "; fi
    if [[ ${EXIT} -eq 0 ]]; then 
	    PS1+="$Green[\#]$Color_Off "; 
    else 
	    PS1+="$Red[\#]$Color_Off "; 
    fi
 
    # if logged in via ssh shows the ip of the client
    if [ -n "$SSH_CLIENT" ]; 
       then 
       PS1+="$Yellow ("${SSH_CLIENT%% *}") $Color_Off "; 
    fi
 

    # debian chroot stuff (take it or leave it)
    PS1+="${debian_chroot:+($debian_chroot)}"
 
    # basic information (user@host:path)
    #PS1+="$BRed\u$Color_Off@$BRed\h$Color_Off:$BPurple\w$Color_Off "
    PS1+="$Blue\u$Color_Off@$Blue\h$Color_Off:$BPurple\w$Color_Off "
 
    # check if inside git repo
    local git_status="`git status -unormal 2>&1`"
    if ! [[ "$git_status" =~ Not\ a\ git\ repo ]]; then
        # parse the porcelain output of git status
        if [[ "$git_status" =~ nothing\ to\ commit ]]; then
local Color_On=$Green
        elif [[ "$git_status" =~ nothing\ added\ to\ commit\ but\ untracked\ files\ present ]]; then
local Color_On="$Purple"
        else
local Color_On="$Red"
        fi
if [[ "$git_status" =~ On\ branch\ ([^[:space:]]+) ]]; then
branch=${BASH_REMATCH[1]}
        else
            # Detached HEAD. (branch=HEAD is a faster alternative.)
            branch="(`git describe --all --contains --abbrev=4 HEAD 2> /dev/null || echo HEAD`)"
        fi
branch="["$branch"]"
        # add the result to prompt
        #"$BRed\u$Color_Off@$BRed\h$Color_Off:$BPurple\w$Color_Off "
        
        PS1+="$Color_On $branch $Color_Off "
    fi
    # prompt $ or # for root
    PS1+="\$ "

   if [ ! -z $VIRTUAL_ENV  ]; then
      PS1="(`basename \"$VIRTUAL_ENV\"`)$PS1"
   fi 
}
PROMPT_COMMAND=__prompt_command



# source aliases

if [ -f ~/.bash_aliases ]; then
   source ~/.bash_aliases
fi


# enable bash completion in interactive shells
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


# Define a word using collinsdictionary.com
function define() {
  curl -s "http://www.collinsdictionary.com/dictionary/english/$*" \
	  | sed -n '/class="def"/p' | \
	  awk '{gsub(/.*<span class="def">|<\/span>.*/,"");print}' \
		  | sed "s/<[^>]\+>//g";
}

# Easily extract all compressed file types
function extract () {
   if [ -f "$1" ] ; then
       case $1 in
           *.tar.bz2)   tar xvjf -- "$1"    ;;
           *.tar.gz)    tar xvzf -- "$1"    ;;
           *.bz2)       bunzip2 -- "$1"     ;;
           *.rar)       unrar x -- "$1"     ;;
           *.gz)        gunzip -- "$1"      ;;
           *.tar)       tar xvf -- "$1"     ;;
           *.tbz2)      tar xvjf -- "$1"    ;;
           *.tgz)       tar xvzf -- "$1"    ;;
           *.zip)       unzip -- "$1"       ;;
           *.Z)         uncompress -- "$1"  ;;
           *.7z)        7z x -- "$1"        ;;
	   *.xz)        echo "$1";  tar xvJf "$1"    ;;
           *)           echo "don't know how to extract '$1'..." ;;
       esac
   else
       echo "'$1' is not a valid file"
   fi
}

# parallel extract
function pextract()
   if [ -f "$1" ] ; then
       case $1 in
           *.tar.bz2)   tar xvjf -- "$1"    ;;
           *.tar.gz)    tar xvzf -- "$1"    ;;
           *.bz2)       bunzip2 -- "$1"     ;;
           *.rar)       unrar x -- "$1"     ;;
           *.gz)        gunzip -- "$1"      ;;
           *.tar)       tar xvf -- "$1"     ;;
           *.tbz2)      tar xvjf -- "$1"    ;;
           *.tgz)       tar xvzf -- "$1"    ;;
           *.zip)       unzip -- "$1"       ;;
           *.Z)         uncompress -- "$1"  ;;
           *.7z)        7z x -- "$1"        ;;
	   # you need pixz
	   *.xz)        tar -Ipixz -xvf "$1";;
           *)           echo "don't know how to extract '$1'..." ;;
       esac
   else
       echo "'$1' is not a valid file"
   fi



if [ -f ~/.bash_alias ]; then
   source ~/.bash_alias 

fi

export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/Software

if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
   source /usr/local/bin/virtualenvwrapper.sh
elif [ -f /usr/bin/virtualenvwrapper.sh ]; then
   source /usr/bin/virtualenvwrapper.sh
fi


export PYTHONSTARTUP=~/.pythonrc
export AUTO_NTFY_DONE_LONGER_THAN=-L15
source /home/oznt/.local/share/ntfy/bash-preexec.sh
source /home/oznt/.local/share/ntfy/auto-ntfy-done.sh
eval "$(thefuck --alias)"


# Greetings stranger, if you reached here by reading trough, here is a
#__        __                    __        __   _
#\ \      / /_ _ _ __ _ __ ___   \ \      / /__| | ___  ___ ___  _ __ ___   ___
# \ \ /\ / / _` | '__| '_ ` _ \   \ \ /\ / / _ \ |/ _ \/ __/ _ \| '_ ` _ \ / _ \
#  \ V  V / (_| | |  | | | | | |   \ V  V /  __/ |  __/ (_| (_) | | | | | |  __/
#   \_/\_/ \__,_|_|  |_| |_| |_|    \_/\_/ \___|_|\___|\___\___/|_| |_| |_|\___|
#
# You have found my highly opinionated bashrc composed of snippets from various
# sources, battle tested through almost a decade of linux administration and
# software development in hostile environments.
#
# The sources and insiration for this bashrc are as the following,
# not necessarily in order
# of amount or importance:
# - zless - for extract alias
# - debian default profile
# - git-prompt
# - ipython
# - vim-powerline (and vim-airline
#
# To enjoy the full power of this bashrc you should install the following
# dependencies:
# ntfy - http://ntfy.readthedocs.io/en/latest/
# thefuck - https://github.com/nvbn/thefuck
